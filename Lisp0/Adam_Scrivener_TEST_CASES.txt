TEST CASES

************************1.*******************************

Break 1 [2]> (undefined 'a)
**No instance of *undefined*!
NIL
Break 1 [2]> (undefined '*undefined*)

T
Break 1 [2]> (undefined '(5 3 7 '(3 2 '*undefined* 5)))

T
Break 1 [2]> (undefined '(5 3 7 '(3 2 'meow 5)))
**No instance of *undefined*!
NIL
Break 1 [2]> 


************************2.*******************************

Break 1 [2]> (n-occurrences 'a 'a)

0
Break 1 [2]> (n-occurrences 'a '(a a))

2
Break 1 [2]> (n-occurrences 'a '(b a (a) (B (C ((A)) (A) D ) (B A))))

5
Break 1 [2]> (n-occurrences '(a b) '(a b))
**First argument should be an atom, but was (A B)
NIL
Break 1 [2]> 


************************3.*******************************

Break 8 [9]> (deriv1 '(2 x 3))

(6 X 2)
Break 8 [9]> (deriv1 '(-2 y -1))

(2 Y -2)
Break 8 [9]> (deriv1 '(.5 z 4))

(2.0 Z 3)
Break 8 [9]> (deriv1 '(7 x 1))

(7 X 0)
Break 8 [9]> (deriv1 '(0 x 2))

(0 X 0)
Break 8 [9]> (deriv1 '(3 z 0))

(0 Z 0)
Break 8 [9]> (deriv1 'a)
**Argument must be a list.
NIL
Break 8 [9]> (deriv1 '())
**Argument must have 3 elements.
NIL
Break 8 [9]> (deriv1 '(a a a))
**First element in list must be a number.
NIL
Break 8 [9]> (deriv1 '(5 3 2))
**Second element in list cannot be a number.
NIL
Break 8 [9]> (deriv1 '(5 '() 2))
**Second element in list cannot itself be a list.
NIL
Break 8 [9]> (deriv1 '(5 a .3))
**Third element in list must be a positive or negative integer.
NIL
Break 8 [9]> (deriv1 '(5 a 3))

(15 A 2)
Break 8 [9]> 

************************4.*******************************

Break 8 [9]> (simplify '((6 x 2) (2 x 0) (-2 x 4) (1 x -1) (0 x 5) (3 x 1) (-5 x 2)))

((-2 X 4) (1 X 2) (3 X 1) (2 X 0) (1 X -1))
Break 8 [9]> (simplify '((6 x 2) (2 x 0) (-2 x 4) (1 x 2) (0 x 5) (3 x 2) (-5 x 4)))

((-7 X 4) (10 X 2) (2 X 0))
Break 8 [9]> (simplify '((6 x 2) (2 x 0) (-2 x 4) (1 x 2) (0 x 5) (3 x 2) (-5 z 4)))
Polynomial must have only 1 variable!
NIL
Break 8 [9]> (simplify 'a)
Polynomial must be a list and contain monomials!
NIL
Break 8 [9]> (simplify '())
Polynomial cannot be empty!
NIL
Break 8 [9]> (simplify '((6 x 2) (-6 x 2)))

NIL
Break 8 [9]> 

NOTE: IF THE FUNCTION RETURNS NIL, IT IS THE 0 POLYNOMIAL.

************************5.*******************************

Break 8 [9]> (deriv2 '((6 x 2) (2 x 0) (-2 x 4) (1 x -1) (0 x 5) (-5 x 2)))

((-8 X 3) (2 X 1) (-1 X -2))
Break 8 [9]> (deriv2 '((6 x 2) (2 y 0)))
Polynomial must have only 1 variable!
NIL
Break 8 [9]> (deriv2 '())
Polynomial cannot be empty!
NIL
Break 8 [9]> (deriv2 '((6 x 3) (5 x 3) (5 x 62) (3 x -12) (17 x 3) (2 x 4) (4 x 62)))

((558 X 61) (8 X 3) (84 X 2) (-36 X -13))
Break 8 [9]> 

************************6.*******************************

Break 8 [9]> (tree-yield 'a)

A
Break 8 [9]> (tree-yield nil)

NIL
Break 8 [9]> (tree-yield '(a . b))

(A B)
Break 8 [9]> (tree-yield '((a b) c (d (e f))))

(A B C D E F)
Break 8 [9]> 
